name: PR Validation

# Comprehensive validation on every pull request
on:
  pull_request:
    branches: ['**']
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build, Test & Analyze
    runs-on: self-hosted
    permissions:
      pull-requests: write
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarCloud

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: |
          ${{ runner.os }}-sonar

    - name: Install SonarCloud scanner
      run: dotnet tool install --global dotnet-sonarscanner || true

    - name: Install dotCover
      run: dotnet tool install --global JetBrains.dotCover.GlobalTool || true

    - name: Restore dependencies
      run: dotnet restore

    - name: Begin SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet-sonarscanner begin \
          /k:"ooples_AiDotNet" \
          /o:"ooples" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.dotcover.reportsPaths="dotCover.Output.html" \
          /d:sonar.coverage.exclusions="**/tests/**,**/testconsole/**,**/AiDotNetBenchmarkTests/**"
      continue-on-error: true

    - name: Build (Release)
      run: dotnet build --no-restore --configuration Release /p:EnforceCodeStyleInBuild=true

    - name: Run tests with coverage
      run: |
        dotnet dotcover test --dcReportType=HTML --dcOutput=dotCover.Output.html --dcFilters="-:module=AiDotNetTests;-:module=AiDotNetTestConsole;-:module=AiDotNetBenchmarkTests"
      continue-on-error: true

    - name: End SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      continue-on-error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          dotCover.Output.html
          **/TestResults/**/*.xml
      if: always()

    - name: Check code coverage threshold
      run: |
        echo "TODO: Implement coverage threshold check (80% minimum)"
        echo "This will be implemented once tests are added"
      continue-on-error: true

    - name: Build NuGet package
      run: dotnet pack --no-build --configuration Release --output ./artifacts

    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

    - name: Send notification to Slack
      if: failure() && secrets.SLACK_WEBHOOK_URL != ''
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": "❌ PR Validation Failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*PR Validation Failed*\n*Repository:* ${{ github.repository }}\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }}>\n*Author:* ${{ github.actor }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Send email notification on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "❌ PR Validation Failed - ${{ github.event.pull_request.title }}"
        to: cheatcountry@gmail.com
        from: GitHub Actions
        body: |
          PR Validation Failed

          Repository: ${{ github.repository }}
          PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          Author: ${{ github.actor }}
          URL: ${{ github.event.pull_request.html_url }}

          Please check the workflow run for details:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      continue-on-error: true

    - name: PR validation summary
      if: always()
      run: |
        echo "## PR Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- Roslyn analyzers: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- SonarCloud: ⏳ Check SonarCloud dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL: ⏳ Check security tab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "⚠️  Coverage reporting will be available once tests are implemented" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- NuGet package created ✅" >> $GITHUB_STEP_SUMMARY

  codeql:
    name: CodeQL Security Analysis
    runs-on: self-hosted
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build for CodeQL
      run: dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
