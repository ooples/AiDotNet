name: CI (.NET)

on:
  pull_request:
    branches: [ merge-dev2-to-master ]
  push:
    branches: [ merge-dev2-to-master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore AiDotNet.sln

      - name: Verify code style (dotnet format)
        run: |
          dotnet tool update -g dotnet-format || dotnet tool install -g dotnet-format
          export PATH="$PATH:$HOME/.dotnet/tools"
          dotnet format AiDotNet.sln --verify-no-changes || (echo "Run 'dotnet format' locally to fix style issues." && exit 1)

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        dotnet: ['6.0.x', '8.0.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Restore
        run: dotnet restore AiDotNet.sln

      - name: Build
        run: dotnet build AiDotNet.sln --configuration Release --no-restore

      - name: Test with coverage
        run: dotnet test AiDotNet.sln -c Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Upload coverage to Codecov
        if: secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./TestResults
          fail_ci_if_error: true

      - name: Publish core library (sanity)
        run: |
          if [ -f "src/AiDotNet.csproj" ]; then
            dotnet publish src/AiDotNet.csproj -c Release -o out
          else
            echo "AiDotNet.csproj not found, skipping publish sanity"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            out/
            **/bin/Release/
          if-no-files-found: ignore
          retention-days: 7

  test:
    name: Test (.NET ${{ matrix.dotnet }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        dotnet: ['6.0.x', '8.0.x']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
run: dotnet restore AiDotNet.sln
      - name: Run tests with coverage
        run: |
          dotnet test AiDotNet.sln --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Upload coverage to Codecov (only uploads if secret set)\n        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            ./TestResults/**/coverage.cobertura.xml
          flags: unittests
          fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Run integration console (if present)
        run: |
          if [ -f "testconsole/AiDotNetTestConsole.csproj" ]; then
            dotnet run -c Release -p testconsole/AiDotNetTestConsole.csproj || exit 1
          else
            echo "No integration console project found; skipping"
          fi

  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-format, build, build-netfx, test, integration-test]
    steps:
      - name: Verify job outcomes
        run: |
          [ "${{ needs.lint-and-format.result }}" = "success" ] || (echo "Lint/format failed" && exit 1)
          [ "${{ needs.build.result }}" = "success" ] || (echo "Build failed" && exit 1)
          [ "${{ needs.test.result }}" = "success" ] || (echo "Tests failed" && exit 1)
          [ "${{ needs.integration-test.result }}" = "success" ] || (echo "Integration tests failed" && exit 1)
          echo "All checks passed!"







  build-netfx:
    name: Build (.NET Framework 4.6)
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        shell: pwsh
        run: |
          dotnet restore

      - name: Build (Windows MSBuild)
        shell: pwsh
        run: |
          # Build all projects; if multi-targeting includes net46, MSBuild will build it on Windows
          dotnet build -c Release --no-restore

      - name: Upload netfx build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: netfx-build-${{ github.sha }}
          path: |
            **/bin/Release/
          if-no-files-found: ignore
          retention-days: 7



